;;; Copyright 2010 Gary Johnson
;;;
;;; This file is part of clj-span.
;;;
;;; clj-span is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published
;;; by the Free Software Foundation, either version 3 of the License,
;;; or (at your option) any later version.
;;;
;;; clj-span is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with clj-span.  If not, see <http://www.gnu.org/licenses/>.
;;;
;;;-------------------------------------------------------------------
;;;
;;; This namespace provides examples of SPAN source, sink, use,
;;; carrier, and service definitions.

(ns clj-span.agents
  (:use [clj-span.model-lang :only (defspan service source sink user carrier)]))

(defspan :source surface-water
  "Runoff generated by precipitation, snowmelt, and wellsprings."
  :source-type  :absolute
  :source-rate  'waterEcology:runoffRate
  :source-limit 100)

(defspan :sink water-infiltration
  "Surface water infiltration due to soil permeability."
  :sink-type          :absolute
  :sink-rate          'waterEcology:infiltrationRate
  :sink-limit         'waterEcology:infiltrationCapacity
  :sink-recovery-rate 'waterEcology:infiltrationRecoveryRate)

(defspan :user water-extraction-by-farmers
  "Extraction of surface water by human consumers."
  :rival?            true
  :use-type          :absolute
  :use-rate          'waterEconomics:extractionRateByFarmers
  :use-limit         'waterEconomics:extractionLimitByFarmers
  :use-recovery-rate 'waterEconomics:extractionRecoveryRateByFarmers)

(defspan :carrier sledder
  "This agent always moves downhill by the steepest path."
  :origin           :source
  :weight           surface-water
  :movement         :surface-water-downhill-steepest-path
  :decay            nil
  :weight-branching :even-split
  :min-weight       0.1)

#_(defspan :carrier sledder-foo
    "This agent always moves downhill by the steepest path."
    :initial-weight   (fn [start-location] (vector (:source-quantity start-location) (:source-quality start-location)))
    :movement         (fn [current-location] (steepest-downhill (cons current-location (:neighbors current-location))))
    :decay            nil
    :weight-branching (fn [weight next-locations] (let [num-next (count next-locations)]
                                                    (if (== num-next 1)
                                                      weight
                                                      (repeat num-next (/ weight num-next)))))
    :min-weight       0.1)

(defspan :service surface-water-provision-to-farmers
  "The Ecosystem Service of providing above ground water to farmers."
  :source  surface-water
  :sink    water-infiltration
  :user    water-extraction-by-farmers
  :carrier sledder)
